---
import MainLayout from "../../../layouts/MainLayout.astro";
import { db } from "../../../lib/db.js";

// Set to server-rendering instead of static generation
export const prerender = false;

// Get the topic ID from the URL
const { id } = Astro.params;

// Get parent post ID if replying to a specific post
const parentId = Astro.url.searchParams.get('parent');

// Fetch topic data
const topic = await db.topic.getById(Number(id));

// If the topic doesn't exist or is locked, redirect
if (!topic) {
  return Astro.redirect('/topics');
}

if (topic.isLocked) {
  return Astro.redirect(`/topics/${id}`);
}

// Initialize error message
let errorMessage = '';
let formData = {
  content: ''
};

// Check if user is logged in
const isLoggedIn = Astro.cookies.has('user_id');

if (!isLoggedIn) {
  return Astro.redirect(`/login?returnUrl=${encodeURIComponent(Astro.url.pathname)}`);
}

// Get the user ID from the cookie
const userId = Number(Astro.cookies.get('user_id').value);

// Handle form submission
if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const content = data.get('content')?.toString().trim();

    // Save form data in case of errors
    formData = { content: content || '' };

    // Validate input
    if (!content) {
      errorMessage = 'Content is required';
    } else if (content.length < 10) {
      errorMessage = 'Content must be at least 10 characters long';
    } else {
      // Create the post
      const post = await db.post.create({
        content,
        topicId: Number(id),
        authorId: userId,
        parentId: parentId ? Number(parentId) : null
      });

      // Redirect to the topic, focusing on the new post
      return Astro.redirect(`/topics/${id}#post-${post.id}`);
    }
  } catch (error) {
    console.error('Error creating reply:', error);
    errorMessage = 'An error occurred while creating your reply. Please try again.';
  }
}

// Get parent post for quoting/context if replying to a specific post
let parentPost = null;
if (parentId) {
  parentPost = await db.post.getById(Number(parentId));
}
---

<MainLayout title={`Reply to ${topic.title}`}>
  <div class="breadcrumbs">
    <a href="/">Home</a> &raquo; <a href="/forums">Forums</a> &raquo; <a href={`/forums/${topic.forum.id}`}>{topic.forum.title}</a> &raquo; <a href={`/topics/${id}`}>{topic.title}</a> &raquo; Reply
  </div>

  <div class="create-reply">
    <h1>Reply to: {topic.title}</h1>

    {errorMessage && (
      <div class="alert alert-error">
        {errorMessage}
      </div>
    )}

    {parentPost && (
      <div class="parent-post">
        <h3>Replying to {parentPost.author.username}'s post:</h3>
        <blockquote>
          <p>{parentPost.content.length > 150
            ? parentPost.content.substring(0, 150) + '...'
            : parentPost.content}</p>
          <footer><a href={`/topics/${id}#post-${parentPost.id}`}>View post</a></footer>
        </blockquote>
      </div>
    )}

    <form method="POST" class="reply-form" enctype="multipart/form-data">
      <div class="form-group">
        <label for="content">Your Reply</label>
        <textarea id="content" name="content" required class="form-control post-editor" rows="15">{formData.content}</textarea>
        <div class="editor-help">
          <p>You can use basic HTML tags: &lt;p&gt;, &lt;h3&gt;, &lt;h4&gt;, &lt;ul&gt;, &lt;ol&gt;, &lt;li&gt;, &lt;strong&gt;, &lt;em&gt;, &lt;a&gt;</p>
        </div>
      </div>
      <div class="form-actions">
        <button type="submit" class="btn btn-primary">Post Reply</button>
        <a href={`/topics/${id}`} class="btn">Cancel</a>
      </div>
    </form>
  </div>

  <style>
    .create-reply {
      background-color: var(--forum-topic-bg);
      padding: 20px;
      border: 1px solid var(--border-color);
      margin-bottom: 20px;
    }

    .create-reply h1 {
      color: var(--secondary-color);
      margin-bottom: 20px;
      font-size: 24px;
    }

    .reply-form {
      max-width: 800px;
    }

    .form-group {
      margin-bottom: 20px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }

    .form-control {
      width: 100%;
      padding: 10px;
      background-color: var(--input-bg);
      border: 1px solid var(--border-color);
      color: var(--text-color);
    }

    .post-editor {
      font-family: monospace;
      line-height: 1.5;
    }

    .editor-help {
      margin-top: 5px;
      font-size: 12px;
      color: var(--text-muted);
    }

    .form-actions {
      display: flex;
      gap: 10px;
    }

    .parent-post {
      margin-bottom: 20px;
      border-left: 4px solid var(--primary-color);
      padding-left: 15px;
    }

    .parent-post h3 {
      color: var(--secondary-color);
      font-size: 16px;
      margin-bottom: 8px;
    }

    blockquote {
      margin: 0;
      padding: 10px 15px;
      background-color: var(--forum-topic-alt);
      border-radius: 5px;
      font-style: italic;
      color: var(--text-muted);
    }

    blockquote footer {
      margin-top: 10px;
      text-align: right;
      font-style: normal;
    }
  </style>
</MainLayout>
