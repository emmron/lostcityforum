---
import MainLayout from "../../layouts/MainLayout.astro";
import { db } from "../../lib/db.js";

// Set to server-rendering instead of static generation
export const prerender = false;

// The original getStaticPaths function can be removed since we're using server-side rendering
// export async function getStaticPaths() {
//   // For SSG, we need to fetch all topics in advance
//   // In a real app with many topics, you might want to use SSR instead with Astro.params
//   return [{ params: { id: "1" } }]; // Just support the initial welcome topic for now
// }

const { id } = Astro.params;

// Increment view count
await db.topic.incrementViews(Number(id));

// Fetch topic data from database
const topic = await db.topic.getById(Number(id));

// If the topic doesn't exist, show 404
if (!topic) {
  return Astro.redirect('/404');
}

// Get forum information for breadcrumbs
const forumId = topic.forum.id;
const forumTitle = topic.forum.title;

// Check if user is logged in for showing reply controls
const isLoggedIn = Astro.cookies.has('user_id');
let currentUser = null;

if (isLoggedIn) {
  const userId = Number(Astro.cookies.get('user_id').value);
  currentUser = await db.user.findById(userId);
}

// Organize posts into a threaded structure
const rootPosts = [];
const postMap = new Map();

// Create a map of all posts and identify root posts
topic.posts.forEach(post => {
  postMap.set(post.id, { ...post, replies: [] });
  if (!post.parentId) {
    rootPosts.push(post.id);
  }
});

// Build the tree structure
topic.posts.forEach(post => {
  if (post.parentId && postMap.has(post.parentId)) {
    postMap.get(post.parentId).replies.push(post.id);
  }
});

// Function to render posts recursively
const renderPosts = (postIds, depth = 0, postNumber = { current: 1 }) => {
  let result = [];

  postIds.forEach(postId => {
    const post = postMap.get(postId);
    const currentPostNumber = postNumber.current++;

    result.push({
      post,
      depth,
      postNumber: currentPostNumber,
    });

    if (post.replies.length > 0) {
      result = result.concat(renderPosts(post.replies, depth + 1, postNumber));
    }
  });

  return result;
};

// Get the final ordered list of posts with depth information
const orderedPosts = renderPosts(rootPosts);
---

<MainLayout title={topic?.title || "Topic Not Found"}>
  <div class="breadcrumbs">
    <a href="/">Home</a> &raquo; <a href="/forums">Forums</a> &raquo; <a href={`/forums/${forumId}`}>{forumTitle}</a> &raquo; {topic.title}
  </div>

  <div class="topic-header">
    <h1>{topic.title}</h1>
    <div class="topic-controls">
      {!topic.isLocked && isLoggedIn && (
        <a href={`/topics/${id}/reply`} class="btn btn-primary">Reply</a>
      )}
    </div>
  </div>

  <!-- Posts -->
  <div class="posts">
    {orderedPosts.map(({ post, depth, postNumber }) => (
      <div class="post" id={`post-${post.id}`} style={`margin-left: ${depth * 30}px;`}>
        <div class="post-header" style={depth > 0 ? 'background-color: var(--forum-category-bg);' : ''}>
          <div class="post-info">Post #{postNumber} - {new Date(post.createdAt).toLocaleString()}</div>
          <div class="post-controls">
            <a href={`#post-${post.id}`} title="Link to this post">#</a>
            {isLoggedIn && !topic.isLocked && (
              <>
                <a href={`/topics/${id}/reply?parent=${post.id}`} title="Reply to this post">Reply</a>
                <a href={`/topics/${id}/quote/${post.id}`} title="Quote this post">Quote</a>
              </>
            )}
            {isLoggedIn && (currentUser?.id === post.author.id || currentUser?.username === "Admin") && (
              <a href={`/topics/${id}/edit/${post.id}`} title="Edit this post">Edit</a>
            )}
            {isLoggedIn && currentUser && (
              <a href={`/messages/compose?to=${post.author.username}`} title="Send message">Message</a>
            )}
          </div>
        </div>
        <div class="post-content" style={depth > 0 ? 'border-left: 4px solid var(--primary-color);' : ''}>
          <div class="post-user">
            <div class="username">
              <a href={`/members/${post.author.username}`}>{post.author.username}</a>
            </div>
            <div class="avatar">
              <img src={post.author.avatarUrl || "/images/avatars/default.png"} alt={`${post.author.username}'s avatar`} />
            </div>
            <div class="user-info">
              <div class="join-date">Joined: {new Date(post.author.createdAt).toLocaleDateString()}</div>
              <div class="post-count">Posts: {post.author.postsCount}</div>
            </div>
          </div>
          <div class="post-body">
            <div class="post-text" set:html={post.content} />
            {post.isEdited && <div class="edited-note">This post was edited on {new Date(post.editedAt).toLocaleString()}</div>}
            {post.author.signature && (
              <div class="signature">
                <hr />
                <p>{post.author.signature}</p>
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Reply Button at Bottom -->
  <div class="topic-footer">
    <div class="paginator">
      <a href="#" class="current">1</a>
    </div>
    {!topic.isLocked && isLoggedIn ? (
      <a href={`/topics/${id}/reply`} class="btn btn-primary">Reply</a>
    ) : topic.isLocked ? (
      <div class="locked-notice">This topic is locked and cannot be replied to</div>
    ) : (
      <div class="login-notice">Please <a href={`/login?returnUrl=${encodeURIComponent(`/topics/${id}`)}`}>login</a> to reply</div>
    )}
  </div>

  <style>
    .topic-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .topic-header h1 {
      color: var(--secondary-color);
      font-size: 24px;
    }

    .posts {
      margin-bottom: 20px;
    }

    .post {
      margin-bottom: 20px;
      transition: all 0.3s ease;
    }

    .post:target {
      box-shadow: 0 0 10px var(--primary-color);
    }

    .post-header {
      background-color: var(--post-header);
      padding: 8px 15px;
      display: flex;
      justify-content: space-between;
      border: 1px solid var(--border-color);
      font-size: 12px;
    }

    .post-controls a {
      margin-left: 10px;
      color: var(--link-color);
      text-decoration: none;
    }

    .post-controls a:hover {
      text-decoration: underline;
    }

    .post-content {
      display: flex;
      border: 1px solid var(--border-color);
      border-top: none;
      background-color: var(--post-bg);
    }

    .post-user {
      flex: 0 0 150px;
      padding: 15px;
      border-right: 1px solid var(--border-color);
      background-color: var(--forum-topic-alt);
      text-align: center;
    }

    .post-body {
      flex: 1;
      padding: 15px;
    }

    .username {
      font-weight: bold;
      font-size: 14px;
      margin-bottom: 10px;
    }

    .username a {
      color: var(--link-color);
      text-decoration: none;
    }

    .username a:hover {
      text-decoration: underline;
    }

    .avatar img {
      max-width: 100px;
      height: auto;
      border: 1px solid var(--border-color);
      margin-bottom: 10px;
    }

    .user-info {
      font-size: 12px;
      color: #999;
    }

    .post-text {
      line-height: 1.6;
    }

    .edited-note {
      font-size: 12px;
      color: #999;
      margin-top: 10px;
      font-style: italic;
    }

    .signature {
      margin-top: 20px;
      font-size: 12px;
      color: #666;
    }

    .signature hr {
      border: none;
      border-top: 1px solid var(--border-color);
      margin: 5px 0;
    }

    .locked-notice, .login-notice {
      background-color: var(--forum-topic-alt);
      padding: 10px;
      border-radius: 5px;
      text-align: center;
    }

    @media (max-width: 768px) {
      .post-content {
        flex-direction: column;
      }

      .post-user {
        border-right: none;
        border-bottom: 1px solid var(--border-color);
        flex: none;
      }
    }
  </style>
</MainLayout>
