---
import MainLayout from "../../layouts/MainLayout.astro";
import { getCollection } from "astro:content";

// Get actual member data from the database or content collection
const allMembers = await getCollection("members");

// Process member data
let members = allMembers.map(member => ({
  id: member.id,
  username: member.data.username,
  avatar: member.data.avatar || "/images/avatars/default.png",
  joinDate: new Date(member.data.joinDate).toISOString().split('T')[0],
  posts: member.data.posts || 0,
  role: member.data.role || "Member",
  lastActive: member.data.lastActive || "Never"
}));

// Get sort parameter from URL
const url = Astro.url;
const sortParam = url.searchParams.get('sort') || 'posts';
const searchQuery = url.searchParams.get('search') || '';

// Filter members if search query exists
if (searchQuery) {
  members = members.filter(member =>
    member.username.toLowerCase().includes(searchQuery.toLowerCase())
  );
}

// Sort members based on parameter
switch(sortParam) {
  case 'username':
    members.sort((a, b) => a.username.localeCompare(b.username));
    break;
  case 'joinDate':
    members.sort((a, b) => new Date(b.joinDate) - new Date(a.joinDate));
    break;
  case 'lastActive':
    members.sort((a, b) => new Date(b.lastActive) - new Date(a.lastActive));
    break;
  case 'posts':
  default:
    members.sort((a, b) => b.posts - a.posts);
    break;
}

// Pagination
const membersPerPage = 10;
const currentPage = parseInt(url.searchParams.get('page') || '1');
const totalPages = Math.ceil(members.length / membersPerPage);
const paginatedMembers = members.slice(
  (currentPage - 1) * membersPerPage,
  currentPage * membersPerPage
);

// Generate pagination links
const getPageUrl = (page) => {
  const params = new URLSearchParams(url.searchParams);
  params.set('page', page.toString());
  return `?${params.toString()}`;
};
---

<MainLayout title="Members">
  <div class="breadcrumbs">
    <a href="/">Home</a> &raquo; Members
  </div>

  <div class="page-header">
    <h1>Forum Members</h1>
    <div class="sort-controls">
      <span>Sort by:</span>
      <a href={`?sort=posts${searchQuery ? `&search=${searchQuery}` : ''}`} class={sortParam === 'posts' ? 'active' : ''}>Posts</a>
      <a href={`?sort=username${searchQuery ? `&search=${searchQuery}` : ''}`} class={sortParam === 'username' ? 'active' : ''}>Username</a>
      <a href={`?sort=joinDate${searchQuery ? `&search=${searchQuery}` : ''}`} class={sortParam === 'joinDate' ? 'active' : ''}>Join Date</a>
      <a href={`?sort=lastActive${searchQuery ? `&search=${searchQuery}` : ''}`} class={sortParam === 'lastActive' ? 'active' : ''}>Last Active</a>
    </div>
  </div>

  <form class="member-search" method="get">
    <input
      type="text"
      name="search"
      placeholder="Search members..."
      class="form-control"
      value={searchQuery}
    >
    <input type="hidden" name="sort" value={sortParam}>
    <button type="submit" class="btn">Search</button>
    {searchQuery && (
      <a href={`?sort=${sortParam}`} class="btn btn-secondary">Clear</a>
    )}
  </form>

  {members.length === 0 ? (
    <div class="no-results">
      <p>No members found matching your search criteria.</p>
    </div>
  ) : (
    <div class="members-grid">
      {paginatedMembers.map((member) => (
        <div class="member-card">
          <div class="member-avatar">
            <img src={member.avatar} alt={`${member.username}'s avatar`} />
          </div>
          <div class="member-info">
            <div class="member-name">
              <a href={`/members/${member.id}`}>{member.username}</a>
              {member.role !== "Member" && <span class={`role-badge ${member.role.toLowerCase()}`}>{member.role}</span>}
            </div>
            <div class="member-stats">
              <div><span>Posts:</span> {member.posts}</div>
              <div><span>Joined:</span> {member.joinDate}</div>
              <div><span>Last Active:</span> {member.lastActive}</div>
            </div>
          </div>
        </div>
      ))}
    </div>
  )}

  {totalPages > 1 && (
    <div class="paginator">
      {currentPage > 1 && (
        <a href={getPageUrl(currentPage - 1)}>&laquo; Prev</a>
      )}

      {[...Array(totalPages)].map((_, i) => (
        <a
          href={getPageUrl(i + 1)}
          class={currentPage === i + 1 ? 'current' : ''}
        >
          {i + 1}
        </a>
      ))}

      {currentPage < totalPages && (
        <a href={getPageUrl(currentPage + 1)}>Next &raquo;</a>
      )}
    </div>
  )}

  <style>
    .page-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .page-header h1 {
      color: var(--secondary-color);
      margin-bottom: 10px;
    }

    .sort-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 14px;
    }

    .sort-controls a {
      color: var(--link-color);
      text-decoration: none;
    }

    .sort-controls a:hover {
      text-decoration: underline;
    }

    .sort-controls a.active {
      font-weight: bold;
      color: var(--link-hover);
    }

    .member-search {
      display: flex;
      gap: 10px;
      margin-bottom: 20px;
    }

    .member-search input {
      flex: 1;
    }

    .no-results {
      background-color: var(--forum-topic-bg);
      padding: 20px;
      text-align: center;
      border: 1px solid var(--border-color);
      margin-bottom: 20px;
    }

    .members-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 20px;
      margin-bottom: 20px;
    }

    .member-card {
      display: flex;
      gap: 15px;
      padding: 15px;
      background-color: var(--forum-topic-bg);
      border: 1px solid var(--border-color);
    }

    .member-avatar img {
      width: 80px;
      height: 80px;
      border: 1px solid var(--border-color);
    }

    .member-info {
      flex: 1;
    }

    .member-name {
      margin-bottom: 10px;
      display: flex;
      align-items: center;
      gap: 10px;
    }

    .member-name a {
      font-size: 16px;
      font-weight: bold;
      color: var(--link-color);
      text-decoration: none;
    }

    .member-name a:hover {
      text-decoration: underline;
    }

    .role-badge {
      font-size: 11px;
      padding: 2px 6px;
      border-radius: 3px;
      text-transform: uppercase;
    }

    .role-badge.administrator {
      background-color: var(--primary-color);
      color: white;
    }

    .role-badge.moderator {
      background-color: #006600;
      color: white;
    }

    .member-stats {
      font-size: 13px;
      display: grid;
      gap: 5px;
    }

    .member-stats span {
      font-weight: bold;
      color: #999;
    }

    .btn-secondary {
      background-color: #555;
    }

    .btn-secondary:hover {
      background-color: #666;
    }

    @media (max-width: 768px) {
      .members-grid {
        grid-template-columns: 1fr;
      }

      .page-header {
        flex-direction: column;
        align-items: flex-start;
      }
    }
  </style>
</MainLayout>
