---
import MainLayout from "../../layouts/MainLayout.astro";
import { db } from "../../lib/db.js";

// Set to server-rendering
export const prerender = false;

// Check if user is logged in
const isLoggedIn = Astro.cookies.has('user_id');
if (!isLoggedIn) {
  return Astro.redirect('/login?returnUrl=/messages/compose');
}

// Get the user ID from the cookie
const userId = Number(Astro.cookies.get('user_id').value);
const user = await db.user.findById(userId);

// Check if there's a recipient in the query params (for direct messaging)
const recipientUsername = Astro.url.searchParams.get('to');
let recipientUser = null;

if (recipientUsername) {
  recipientUser = await db.user.findByUsername(recipientUsername);
}

// Initialize form data and error message
let errorMessage = '';
let successMessage = '';
let formData = {
  to: recipientUser?.username || '',
  subject: '',
  content: ''
};

// Handle form submission
if (Astro.request.method === 'POST') {
  try {
    const data = await Astro.request.formData();
    const to = data.get('to')?.toString().trim();
    const subject = data.get('subject')?.toString().trim();
    const content = data.get('content')?.toString().trim();

    // Save form data in case of errors
    formData = {
      to: to || '',
      subject: subject || '',
      content: content || ''
    };

    // Validate input
    if (!to || !subject || !content) {
      errorMessage = 'All fields are required';
    } else if (subject.length < 3) {
      errorMessage = 'Subject must be at least 3 characters long';
    } else if (content.length < 10) {
      errorMessage = 'Message must be at least 10 characters long';
    } else {
      // Find the recipient user
      const recipient = await db.user.findByUsername(to);
      if (!recipient) {
        errorMessage = `User "${to}" not found`;
      } else {
        // Create the message
        await db.message.create({
          subject,
          content,
          senderId: userId,
          receiverId: recipient.id
        });

        // Reset form and show success message
        formData = { to: '', subject: '', content: '' };
        successMessage = 'Message sent successfully!';
      }
    }
  } catch (error) {
    console.error('Error sending message:', error);
    errorMessage = 'An error occurred while sending your message. Please try again.';
  }
}
---

<MainLayout title="Compose Message" activeNav="messages">
  <div class="breadcrumbs">
    <a href="/">Home</a> &raquo; <a href="/messages">Messages</a> &raquo; Compose
  </div>

  <div class="messages-container">
    <div class="messages-sidebar">
      <h2>Navigation</h2>
      <ul class="message-nav">
        <li><a href="/messages">Inbox</a></li>
        <li><a href="/messages/sent">Sent Messages</a></li>
        <li class="active"><a href="/messages/compose">Compose New Message</a></li>
      </ul>
    </div>

    <div class="messages-content">
      <h1>Compose New Message</h1>

      {errorMessage && (
        <div class="alert alert-error">
          {errorMessage}
        </div>
      )}

      {successMessage && (
        <div class="alert alert-success">
          {successMessage}
          <p><a href="/messages">Return to inbox</a> or compose another message below.</p>
        </div>
      )}

      <form method="POST" class="message-form">
        <div class="form-group">
          <label for="to">To:</label>
          <input
            type="text"
            id="to"
            name="to"
            class="form-control"
            value={formData.to}
            required
            placeholder="Enter username"
          />
        </div>

        <div class="form-group">
          <label for="subject">Subject:</label>
          <input
            type="text"
            id="subject"
            name="subject"
            class="form-control"
            value={formData.subject}
            required
            placeholder="Enter message subject"
          />
        </div>

        <div class="form-group">
          <label for="content">Message:</label>
          <textarea
            id="content"
            name="content"
            class="form-control"
            rows="10"
            required
            placeholder="Enter your message here"
          >{formData.content}</textarea>
        </div>

        <div class="form-actions">
          <button type="submit" class="btn btn-primary">Send Message</button>
          <a href="/messages" class="btn">Cancel</a>
        </div>
      </form>
    </div>
  </div>

  <style>
    .messages-container {
      display: flex;
      gap: 2rem;
      max-width: 1000px;
      margin: 0 auto;
    }

    .messages-sidebar {
      flex: 0 0 200px;
      background-color: var(--forum-category-bg);
      padding: 1.5rem;
      border-radius: var(--border-radius-md);
      box-shadow: var(--shadow-sm);
    }

    .messages-sidebar h2 {
      color: var(--secondary-color);
      font-size: 1.2rem;
      margin: 0 0 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .message-nav {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .message-nav li {
      margin-bottom: 0.5rem;
      padding: 0.5rem;
      border-radius: var(--border-radius-sm);
    }

    .message-nav li.active {
      background-color: var(--primary-color);
    }

    .message-nav li.active a {
      color: white;
    }

    .message-nav a {
      text-decoration: none;
      color: var(--link-color);
      display: block;
    }

    .messages-content {
      flex: 1;
    }

    .messages-content h1 {
      color: var(--secondary-color);
      margin-bottom: 1.5rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .message-form {
      background-color: var(--forum-topic-bg);
      padding: 1.5rem;
      border-radius: var(--border-radius-md);
      border: 1px solid var(--border-color);
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .form-group label {
      display: block;
      margin-bottom: 0.5rem;
      font-weight: bold;
      color: var(--secondary-color);
    }

    .form-control {
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: var(--border-radius-sm);
      background-color: var(--container-bg);
      color: var(--text-color);
    }

    .form-actions {
      display: flex;
      gap: 1rem;
    }

    .alert {
      padding: 1rem;
      margin-bottom: 1.5rem;
      border-radius: var(--border-radius-sm);
    }

    .alert-error {
      background-color: rgba(220, 53, 69, 0.1);
      color: #dc3545;
      border: 1px solid rgba(220, 53, 69, 0.25);
    }

    .alert-success {
      background-color: rgba(40, 167, 69, 0.1);
      color: #28a745;
      border: 1px solid rgba(40, 167, 69, 0.25);
    }

    @media (max-width: 768px) {
      .messages-container {
        flex-direction: column;
      }

      .messages-sidebar {
        flex: none;
      }
    }
  </style>
</MainLayout>
