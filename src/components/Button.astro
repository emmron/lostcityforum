---
interface Props {
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'outline';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  fullWidth?: boolean;
  icon?: boolean; // Set to true for icon-only button
  class?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  disabled = false,
  fullWidth = false,
  icon = false,
  class: className = '',
} = Astro.props;

const isLink = href !== undefined;
const Tag = isLink ? 'a' : 'button';

const classes = [
  'btn',
  `btn-${variant}`,
  `btn-${size}`,
  icon ? 'btn-icon' : '',
  fullWidth ? 'btn-full' : '',
  className,
].filter(Boolean).join(' ');

const attrs = {
  class: classes,
  ...(isLink ? { href, role: 'button' } : { type }),
  ...(disabled ? { disabled, 'aria-disabled': 'true' } : {}),
};
---

<Tag {...attrs}>
  <slot />
</Tag>

<style>
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-weight: 500;
    text-decoration: none;
    border: none;
    border-radius: var(--border-radius-md);
    cursor: pointer;
    transition: all 0.2s ease;
    position: relative;
    overflow: hidden;
  }

  .btn::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: transparent;
    transition: background-color 0.2s ease;
  }

  .btn:hover::after {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .btn:active::after {
    background-color: rgba(0, 0, 0, 0.1);
  }

  /* Variant styles */
  .btn-primary {
    background-color: var(--primary-color);
    color: white;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .btn-secondary {
    background-color: var(--secondary-color);
    color: var(--background-color);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  }

  .btn-success {
    background-color: var(--success-color);
    color: white;
  }

  .btn-danger {
    background-color: var(--error-color);
    color: white;
  }

  .btn-outline {
    background-color: transparent;
    color: var(--text-color);
    border: 2px solid var(--border-color);
  }

  .btn-outline:hover {
    border-color: var(--primary-color);
    color: var(--primary-color);
  }

  /* Size styles */
  .btn-sm {
    padding: 0.4rem 0.8rem;
    font-size: 0.85rem;
  }

  .btn-md {
    padding: 0.6rem 1.2rem;
    font-size: 1rem;
  }

  .btn-lg {
    padding: 0.8rem 1.5rem;
    font-size: 1.1rem;
  }

  /* Icon button */
  .btn-icon {
    width: 2.5rem;
    height: 2.5rem;
    padding: 0;
    border-radius: 50%;
  }

  .btn-icon.btn-sm {
    width: 2rem;
    height: 2rem;
  }

  .btn-icon.btn-lg {
    width: 3rem;
    height: 3rem;
  }

  /* Full width */
  .btn-full {
    width: 100%;
  }

  /* Disabled state */
  .btn[disabled], .btn[aria-disabled="true"] {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .btn[disabled]::after, .btn[aria-disabled="true"]::after {
    display: none;
  }

  /* Hover and focus states */
  .btn:hover:not([disabled]):not([aria-disabled="true"]) {
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
  }

  .btn:focus-visible {
    outline: 2px solid var(--primary-color);
    outline-offset: 2px;
  }

  .btn:active:not([disabled]):not([aria-disabled="true"]) {
    transform: translateY(0);
  }
</style>
