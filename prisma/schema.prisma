// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String   @unique
  email         String   @unique
  passwordHash  String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  avatarUrl     String?
  signature     String?
  postsCount    Int      @default(0)
  posts         Post[]
  topics        Topic[]
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  forums    Forum[]
}

model Forum {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  sortOrder   Int      @default(0)
  topicsCount Int      @default(0)
  postsCount  Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  topics      Topic[]
}

model Topic {
  id        Int      @id @default(autoincrement())
  title     String
  views     Int      @default(0)
  isSticky  Boolean  @default(false)
  isLocked  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  forumId   Int
  forum     Forum    @relation(fields: [forumId], references: [id])
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  posts     Post[]
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  isEdited  Boolean  @default(false)
  editedAt  DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  topicId   Int
  topic     Topic    @relation(fields: [topicId], references: [id])
}
