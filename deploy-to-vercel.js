/**
 * Vercel Deployment Helper
 *
 * This script helps prepare your project for Vercel deployment
 * by switching from SQLite to PostgreSQL and back.
 *
 * Usage:
 * - To prepare for Vercel deployment: node deploy-to-vercel.js --prepare
 * - To switch back to local dev: node deploy-to-vercel.js --local
 */

import fs from 'fs/promises';
import { execSync } from 'child_process';

// File paths
const SCHEMA_PATH = './prisma/schema.prisma';
const ENV_PATH = './.env';
const MIGRATION_LOCK_PATH = './prisma/migrations/migration_lock.toml';

// Database configurations
const SQLITE_PROVIDER = 'sqlite';
const POSTGRESQL_PROVIDER = 'postgresql';
const SQLITE_URL = 'DATABASE_URL="file:./dev.db"';
const POSTGRESQL_URL_COMMENT = '# DATABASE_URL="postgresql://username:password@host:port/database?schema=public"';

async function readFile(path) {
  try {
    return await fs.readFile(path, 'utf8');
  } catch (error) {
    console.error(`Error reading ${path}:`, error.message);
    return null;
  }
}

async function writeFile(path, content) {
  try {
    await fs.writeFile(path, content, 'utf8');
    console.log(`Updated ${path}`);
  } catch (error) {
    console.error(`Error writing to ${path}:`, error.message);
  }
}

async function updateSchemaProvider(provider) {
  const schema = await readFile(SCHEMA_PATH);
  if (!schema) return;

  const updatedSchema = schema.replace(
    /provider = "(sqlite|postgresql)"/,
    `provider = "${provider}"`
  );

  await writeFile(SCHEMA_PATH, updatedSchema);
}

async function updateMigrationLock(provider) {
  const lockContent = `# Please do not edit this file manually
# It should be added in your version-control system (e.g., Git)
provider = "${provider}"`;

  await writeFile(MIGRATION_LOCK_PATH, lockContent);
}

async function updateEnvFile(forPostgres) {
  const env = await readFile(ENV_PATH);
  if (!env) return;

  // We're toggling between commented and uncommented DATABASE_URL lines
  let updatedEnv;
  if (forPostgres) {
    // Comment out SQLite and uncomment PostgreSQL
    updatedEnv = env.replace(
      /DATABASE_URL="file:\.\/dev\.db"/,
      '# DATABASE_URL="file:./dev.db"'
    ).replace(
      /# DATABASE_URL="postgresql:\/\//,
      'DATABASE_URL="postgresql://'
    );
  } else {
    // Comment out PostgreSQL and uncomment SQLite
    updatedEnv = env.replace(
      /DATABASE_URL="postgresql:\/\//,
      '# DATABASE_URL="postgresql://'
    ).replace(
      /# DATABASE_URL="file:\.\/dev\.db"/,
      'DATABASE_URL="file:./dev.db"'
    );
  }

  await writeFile(ENV_PATH, updatedEnv);
}

function runCommand(command) {
  try {
    console.log(`Running: ${command}`);
    execSync(command, { stdio: 'inherit' });
    return true;
  } catch (error) {
    console.error(`Command failed: ${command}`);
    return false;
  }
}

async function prepareForVercel() {
  console.log('ðŸš€ Preparing for Vercel deployment with PostgreSQL...');

  await updateSchemaProvider(POSTGRESQL_PROVIDER);
  await updateMigrationLock(POSTGRESQL_PROVIDER);
  await updateEnvFile(true);

  console.log('\nâœ… Project prepared for Vercel deployment!');
  console.log('\nNext steps:');
  console.log('1. Create a PostgreSQL database (Vercel, Supabase, Neon, etc.)');
  console.log('2. Update your .env file with the actual PostgreSQL connection string');
  console.log('3. Commit your changes: git add . && git commit -m "Prepare for Vercel deployment"');
  console.log('4. Deploy to Vercel: npx vercel --prod');
  console.log('5. Set the DATABASE_URL environment variable in your Vercel project settings');
  console.log('6. Run migrations: npx prisma migrate deploy');
}

async function switchToLocalDev() {
  console.log('ðŸ”„ Switching back to SQLite for local development...');

  await updateSchemaProvider(SQLITE_PROVIDER);
  await updateMigrationLock(SQLITE_PROVIDER);
  await updateEnvFile(false);

  console.log('\nâœ… Project switched back to SQLite for local development!');
  console.log('\nYou can now run:');
  console.log('npm run dev');
}

// Main function
async function main() {
  const arg = process.argv[2];

  if (arg === '--prepare') {
    await prepareForVercel();
  } else if (arg === '--local') {
    await switchToLocalDev();
  } else {
    console.log('Usage:');
    console.log('- To prepare for Vercel deployment: node deploy-to-vercel.js --prepare');
    console.log('- To switch back to local dev: node deploy-to-vercel.js --local');
  }
}

main().catch(console.error);
